Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    EQUALS
    NAME

Grammar

Rule 0     S' -> statement
Rule 1     statement -> expression
Rule 2     expression -> LPAREN expression RPAREN
Rule 3     expression -> NUMBER COMMA NUMBER
Rule 4     expression -> NULL COMMA NUMBER
Rule 5     expression -> NVL expression
Rule 6     expression -> NULL

Terminals, with rules where they appear

COMMA                : 3 4
EQUALS               : 
LPAREN               : 2
NAME                 : 
NULL                 : 4 6
NUMBER               : 3 3 4
NVL                  : 5
RPAREN               : 2
error                : 

Nonterminals, with rules where they appear

expression           : 1 2 5
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . expression
    (2) expression -> . LPAREN expression RPAREN
    (3) expression -> . NUMBER COMMA NUMBER
    (4) expression -> . NULL COMMA NUMBER
    (5) expression -> . NVL expression
    (6) expression -> . NULL

    LPAREN          shift and go to state 3
    NUMBER          shift and go to state 4
    NULL            shift and go to state 5
    NVL             shift and go to state 6

    statement                      shift and go to state 1
    expression                     shift and go to state 2

state 1

    (0) S' -> statement .



state 2

    (1) statement -> expression .

    $end            reduce using rule 1 (statement -> expression .)


state 3

    (2) expression -> LPAREN . expression RPAREN
    (2) expression -> . LPAREN expression RPAREN
    (3) expression -> . NUMBER COMMA NUMBER
    (4) expression -> . NULL COMMA NUMBER
    (5) expression -> . NVL expression
    (6) expression -> . NULL

    LPAREN          shift and go to state 3
    NUMBER          shift and go to state 4
    NULL            shift and go to state 5
    NVL             shift and go to state 6

    expression                     shift and go to state 7

state 4

    (3) expression -> NUMBER . COMMA NUMBER

    COMMA           shift and go to state 8


state 5

    (4) expression -> NULL . COMMA NUMBER
    (6) expression -> NULL .

    COMMA           shift and go to state 9
    $end            reduce using rule 6 (expression -> NULL .)
    RPAREN          reduce using rule 6 (expression -> NULL .)


state 6

    (5) expression -> NVL . expression
    (2) expression -> . LPAREN expression RPAREN
    (3) expression -> . NUMBER COMMA NUMBER
    (4) expression -> . NULL COMMA NUMBER
    (5) expression -> . NVL expression
    (6) expression -> . NULL

    LPAREN          shift and go to state 3
    NUMBER          shift and go to state 4
    NULL            shift and go to state 5
    NVL             shift and go to state 6

    expression                     shift and go to state 10

state 7

    (2) expression -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 11


state 8

    (3) expression -> NUMBER COMMA . NUMBER

    NUMBER          shift and go to state 12


state 9

    (4) expression -> NULL COMMA . NUMBER

    NUMBER          shift and go to state 13


state 10

    (5) expression -> NVL expression .

    $end            reduce using rule 5 (expression -> NVL expression .)
    RPAREN          reduce using rule 5 (expression -> NVL expression .)


state 11

    (2) expression -> LPAREN expression RPAREN .

    $end            reduce using rule 2 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 2 (expression -> LPAREN expression RPAREN .)


state 12

    (3) expression -> NUMBER COMMA NUMBER .

    $end            reduce using rule 3 (expression -> NUMBER COMMA NUMBER .)
    RPAREN          reduce using rule 3 (expression -> NUMBER COMMA NUMBER .)


state 13

    (4) expression -> NULL COMMA NUMBER .

    $end            reduce using rule 4 (expression -> NULL COMMA NUMBER .)
    RPAREN          reduce using rule 4 (expression -> NULL COMMA NUMBER .)

